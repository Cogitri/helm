apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "paperless.fullname" . }}
  labels:
    {{- include "paperless.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "paperless.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      {{- include "paperless.selectorLabels" . | nindent 6 }}
  {{- if .Values.strategy -}}
  updateStrategy:
  {{- toYaml .Values.strategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      {{- if .Values.podAnnotations }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secrets: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
      labels:
        {{- include "paperless.selectorLabels" . | nindent 8 }}
        {{- toYaml .Values.podLabels | nindent 8 }}
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.image.pullSecrets | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "paperless.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automount }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "paperless.configmaps.general" . }}
          env:
            - name: PAPERLESS_REDIS
              valueFrom:
                secretKeyRef:
                  name: {{ include "paperless.secrets.redis" . }}
                  key: uri
            - name: PAPERLESS_DBUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.paperless.postgresql.existingSecret | default (include "paperless.secrets.postgresql" .) }}
                  key: "username"
            - name: PAPERLESS_DBPASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.paperless.postgresql.existingSecret | default (include "paperless.secrets.postgresql" .) }}
                  key: "password"
            {{- if or .Values.paperless.secretKey.value .Values.paperless.secretKey.existingSecret.name }}
            - name: PAPERLESS_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.paperless.secretKey.existingSecret.name | default (include "paperless.secrets.general" .) }}
                  key: {{ .Values.paperless.secretKey.existingSecret.key | default "secretKey" }}
            {{- end }}
            {{- if or (or .Values.paperless.auth.adminUser .Values.paperless.auth.adminPassword) .Values.paperless.auth.existingSecret }}
            - name: PAPERLESS_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.paperless.auth.existingSecret | default (include "paperless.secrets.admin" .) }}
                  key: {{ "username" }}
            - name: PAPERLESS_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.paperless.auth.existingSecret | default (include "paperless.secrets.admin" .) }}
                  key: {{ "password" }}
            {{- end }}
            {{- if or (or .Values.paperless.smtp.user .Values.paperless.smtp.password) .Values.paperless.smtp.existingSecret }}
            - name: PAPERLESS_EMAIL_HOST_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.paperless.smtp.existingSecret | default (include "paperless.secrets.smtp" .) }}
                  key: {{ "username" }}
            - name: PAPERLESS_EMAIL_HOST_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.paperless.smtp.existingSecret | default (include "paperless.secrets.smtp" .) }}
                  key: {{ "password" }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.paperless.port }}
              protocol: TCP
          volumeMounts:
              {{- $dataDir := .Values.paperless.data.paths.dataDir | default "data" }}
              {{- $mediaDir := .Values.paperless.data.paths.mediaRoot | default "media" }}
            - name: {{ include "paperless.pv.data.name" . }}
              mountPath: {{ include "paperless.paths.base" (dict "path"  $dataDir) }}
            - name: {{ include "paperless.pv.data.name" . }}
              mountPath: {{ include "paperless.paths.base" (dict "path"  $mediaDir) }}
          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          {{- if .Values.securityContext }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
      volumes:
        - name: {{ include "paperless.pv.data.name" . }}
          persistentVolumeClaim:
            claimName: {{ .Values.paperless.data.pvc.existingClaim | default (include "paperless.pvc.data.name" .) }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}
      {{- if .Values.initContainers }}
      initContainers:
        {{- toYaml .Values.initContainers | nindent 8 }}
      {{- end }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: {{ .Values.paperless.data.pvc.reclaimPolicy }}
    whenScaled: {{ .Values.paperless.data.pvc.reclaimPolicy }}
