# Default Helm values for fmjstudios/vaultwarden.
# Reference: https://github.com/fmjstudios/helm

# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @section Vaultwarden Image parameters
##

## Vaultwarden Server Image
## ref: https://hub.docker.com/r/vaultwarden/server/tags
## @param image.registry [string, default: docker.io] The Docker registry to pull the image from
## @param image.repository [string, default: vaultwarden/server] The registry repository to pull the image from
## @param image.tag [string, default: '1.30.1-alpine'] The image tag to pull
## @param image.digest [string] The image digest to pull
## @param image.pullPolicy [string, default: IfNotPresent] The Kubernetes image pull policy
## @param image.pullSecrets [array] A list of secrets to use for pulling images from private registries

image:
  registry: docker.io
  repository: vaultwarden/server
  tag: "1.30.1-alpine"
  digest: ""
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []

## @section Vaultwarden Name overrides
##

## @param nameOverride String to partially override vaultwarden.fullname
##
nameOverride: ""

## @param fullnameOverride String to fully override vaultwarden.fullname
##
fullnameOverride: ""

## @section Vaultwarden Configuration parameters
##

## Vaultwarden configuration
## ref: https://github.com/dani-garcia/vaultwarden/wiki/Configuration-overview
## @param vaultwarden.domain [string] The domain name to give to Vaultwarden

vaultwarden:
  ## The domain of the Vaultwarden installation
  domain: ""

  ## Web UI configuration
  ##
  web:
    ## Whether to enable the Vaultwarden Web UI - enabled by default
    ##
    enabled: true
    ## A custom folder from which to load assets for the Web UI - defaults to 'web-vault/'
    ##
    folder: ""

  ## Controls whether users are allowed to create Bitwarden Sends.
  ## This setting applies globally to all users.
  ##
  allowSends: true

  ## Controls whether users can enable emergency access to their accounts.
  ## This setting applies globally to all users.
  ##
  allowEmergencyAccess: true

  ## Controls whether users can change their email.
  ## This setting applies globally to all users
  ##
  allowEmailChange: true

  ## Controls whether event logging is enabled for organizations
  ## This setting applies to organizations.
  ##
  enableOrgEvents: false

  ## Number of days to retain events stored in the database.
  ## If unset (the default), events are kept indefinitely and the scheduled job is disabled!
  ##
  retainEventsDays:

  ## Client IP Header, used to identify the IP of the client, defaults to "X-Real-IP"
  ## Set to the string "none" (without quotes), to disable any headers and just use the remote IP
  ##
  ipHeader: X-Real-IP

  ## Disable 2FA remember
  ## Enabling this would force the users to use a second factor to login every time.
  ## Note that the checkbox would still be present, but ignored.
  disable2FARemember: false

  ## Controls which users can create new orgs.
  ## Blank or 'all' means all users can create orgs (this is the default)
  ## - 'none' means no users can create orgs
  ## - a comma-separated list means only those users can create orgs (admin1@example.com,admin2@example.com)
  orgCreationUsers: ""

  ## Allowed iframe ancestors (Know the risks!)
  ## https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors
  ## Allows other domains to embed the web vault into an iframe, useful for embedding into secure intranets
  ## This adds the configured value to the 'Content-Security-Policy' headers 'frame-ancestors' value.
  ## Multiple values must be separated with a whitespace.
  allowedIframeAncestors: ""

  ## Token for the admin interface, preferably an Argon2 PCH string
  ## Vaultwarden has a built-in generator by calling `vaultwarden hash`
  ## For details see: https://github.com/dani-garcia/vaultwarden/wiki/Enabling-admin-page#secure-the-admin_token
  ## If not set, the admin panel is disabled
  ##
  adminToken:
    ## New Argon2 PHC string
    ## Note that for some environments, like docker-compose you need to escape all the dollar signs `$` with an extra dollar sign like `$$`
    ## Also, use single quotes (') instead of double quotes (") to enclose the string when needed
    ## value: '$argon2id$v=19$m=65540,t=3,p=4$MmeKRnGK5RW5mJS7h3TOL89GrpLPXJPAtTK8FTqj9HM$DqsstvoSAETl9YhnsXbf43WeaUwJC6JhViIvuPoig78'
    ##
    ## Old plain text string (Will generate warnings in favor of Argon2)
    ## value: "Vy2VyYTTsKPv8W5aEOWUbB/Bt3DEKePbHmI4m9VcemUMS2rEviDowNAFqYi1xjmp"
    ##
    value: ""

    ## Enable this to bypass the admin panel security. This option is only
    ## meant to be used with the use of a separate auth layer in front
    ##
    disable: false

    ## Specify an existing secret to grab the admin token from
    ##
    existingSecret:
      name: ""
      key: ""

  ## Login configuration
  ##
  logins:
    ## Number of seconds, on average, between login requests from the same IP address before rate limiting kicks in.
    ##
    ratelimitSeconds: 60

    ## Allow a burst of requests of up to this size, while maintaining the average indicated by `LOGIN_RATELIMIT_SECONDS`.
    ## Note that this applies to both the login and the 2FA, so it's recommended to allow a burst size of at least 2.
    ##
    ratelimitMaxBurst: 10

    ## Number of seconds, on average, between admin login requests from the same IP address before rate limiting kicks in.
    ##
    adminRatelimitSeconds: 300

    ## Allow a burst of requests of up to this size, while maintaining the average indicated by `ADMIN_RATELIMIT_SECONDS`.
    ##
    adminRatelimitMaxBurst: 3

    ## Set the lifetime of admin sessions to this value (in minutes).
    ##
    adminSessionLifetime: 20

  ## Password configuration
  ##
  passwords:
    ## Number of server-side passwords hashing iterations for the password hash.
    ## The default for new users. If changed, it will be updated during login for existing users.
    ##
    iterations: 350000

    ## Controls whether users can set password hints. This setting applies globally to all users.
    ##
    hintsAllowed: false

    ## Controls whether a password hint should be shown directly in the web page if
    ## SMTP service is not configured. Not recommended for publicly-accessible instances
    ## as this provides unauthenticated access to potentially sensitive data.
    ##
    showHint: false

  ## Signup settings
  signup:
    ## Controls if new users can register
    #
    allowed: true

    ## Controls if new users need to verify their email address upon registration
    ## Note that setting this option to true prevents logins until the email address has been verified!
    ## The welcome email will include a verification link, and login attempts will periodically
    ## trigger another verification email to be sent.
    ##
    verify: true

    ## If signups.verify is set to true, this limits how many seconds after the last time
    ## an email verification link has been sent another verification email will be sent
    ##
    verifyResendTime: 3600

    ## If signups.verify is set to true, this limits how many times an email verification
    ## email will be re-sent upon an attempted login.
    verifyResendLimit: 6

    ## Controls if new users from a list of comma-separated domains can register
    ## even if signups.verify is set to false
    domainWhitelist: ""

    ## Number of minutes to wait before a 2FA-enabled login is considered incomplete,
    ## resulting in an email notification. An incomplete 2FA login is one where the correct
    ## master password was provided but the required 2FA step was not completed, which
    ## potentially indicates a master password compromise. Set to 0 to disable this check.
    ## This setting applies globally to all users.
    ##
    incomplete2FATimeLimit: 3

  ## Authentication settings
  ##
  auth:
    ## According to the RFC6238 (https://tools.ietf.org/html/rfc6238),
    ## we allow by default the TOTP code which was valid one step back and one in the future.
    ## This can however allow attackers to be a bit more lucky with there attempts because there are 3 valid codes.
    ## You can disable this, so that only the current TOTP Code is allowed.
    ## Keep in mind that when a sever drifts out of time, valid codes could be marked as invalid.
    ## In any case, if a code has been used it can not be used again, also codes which predates it will be invalid.
    authenticatorDisableTimeDrift: false

    ## Yubico (Yubikey) Settings
    ## Set your Client ID and Secret Key for Yubikey OTP
    ## You can generate it here: https://upgrade.yubico.com/getapikey/
    ## You can optionally specify a custom OTP server
    yubikey:
      ## Whether to enable authentication via YubiKeys
      ##
      enable: false

      ## Yubikey client ID
      ##
      clientId: ""

      ## Yubikey client Secret
      ##
      clientSecret: ""

      ## Yubikey server
      ##
      server: ""

    ## Duo Settings
    ## You need to configure all options to enable global Duo support, otherwise users would need to configure it themselves
    ## Create an account and protect an application as mentioned in this link (only the first step, not the rest):
    ## https://help.bitwarden.com/article/setup-two-step-login-duo/#create-a-duo-security-account
    ## Then set the following options, based on the values obtained from the last step:
    duo:
      ## Whether to enable authentication via Duo
      ##
      enable: false

      ## Duo integration key
      ##
      integrationKey: ""

      ## Duo secret key
      ##
      secretKey: ""

      ## Duo host
      ##
      host: ""

  ## General email settings
  ##
  email:
    ## Maximum attempts before an email token is reset and a new email will need to be sent.
    ##
    attemptsLimit: 3
    ## Token expiration time
    ## Maximum time in seconds a token is valid. The time the user has to open email client and copy token.
    ##
    tokenExpirationTime: 600

    ## Email token size
    ## Number of digits in an email 2FA token (min: 6, max: 255).
    ## Note that the Bitwarden clients are hardcoded to mention 6 digit codes regardless of this setting!
    tokenSize: 6

  ## Invitations settings
  ##
  invitations:
    ## Invitations org admins to invite users, even when signups are disabled
    ##
    allowed: true
    ## Name shown in the invitation emails that don't come from a specific organization
    ##
    orgName: Vaultwarden
    ## The number of hours after which an organization invite token, emergency access invite token,
    ## email verification token and deletion request token will expire (must be at least 1)
    ##
    expirationHours: 120

  ## Attachments settings
  ##
  attachments:
    ## Per-organization attachment storage limit (KB)
    ## Max kilobytes of attachment storage allowed per organization.
    ## When this limit is reached, organization members will not be allowed to upload further attachments
    ## for ciphers owned by that organization.
    ##
    orgLimit: ""
    ## Per-user attachment storage limit (KB)
    ## Max kilobytes of attachment storage allowed per user.
    ## When this limit is reached, the user will not be allowed to upload further attachments.
    ##
    userLimit: ""

  ## Websocket configuration for push notifications
  ##
  websocket:
    ## Whether to enable the Websocket - disabled by default
    ##
    enabled: false

    ## The address to which the Websocket should bind - 0.0.0.0 by default
    ##
    address: "0.0.0.0"

    ## The port to which on which the Websocket should be made available - 3012 by default
    ##
    port: 3012

  ## Push notification configuration
  ##
  pushNotifications:
    ## Whether to enable push notifications (requires key and id from https://bitwarden.com/host)
    ##
    enabled: false

    ## Installation ID from 'https://bitwarden.com/host'
    ##
    installationId: ""

    ## Installation Key from 'https://bitwarden.com/host'
    ##
    installationKey: ""

    ## The relay URI for push notifications - changes to this setting most likely require
    ## the creation of a custom application image
    ##
    relayUri: "https://push.bitwarden.com"

  ## HaveIBeenPwned API Integration
  ##
  ## HaveIBeenPwned API Key, request it here: https://haveibeenpwned.com/API/Key
  ##
  hibpApiKey:
    value: ""

    ## Specify an existing secret to grab the admin token from
    ##
    existingSecret:
      name: ""
      key: ""

  ## Settings for the job scheduler
  ##
  ## Job schedules use a cron-like syntax (as parsed by https://crates.io/crates/cron),
  ## and are always in terms of UTC time (regardless of your local time zone settings).
  ##
  ## The schedule format is a bit different from crontab as crontab does not contains seconds.
  ## You can test the the format here: https://crontab.guru, but remove the first digit!
  ##
  jobScheduler:
    ## How often (in ms) the job scheduler thread checks for jobs that need running.
    ## Set to 0 to globally disable scheduled jobs.
    ##
    pollIntervalMS: 30000

    ## Cron schedule of the job that checks for Sends past their deletion date.
    ## Defaults to hourly (5 minutes after the hour). Set blank to disable this job.
    ##
    sendPurgeSchedule: "0 5 * * * *"

    ## Cron schedule of the job that checks for trashed items to delete permanently.
    ## Defaults to daily (5 minutes after midnight). Set blank to disable this job.
    ##
    trashPurgeSchedule: "0 5 0 * * *"

    ## Cron schedule of the job that checks for incomplete 2FA logins.
    ## Defaults to once every minute. Set blank to disable this job.
    ##
    incomplete2FASchedule: "30 * * * * *"

    ## Cron schedule of the job that sends expiration reminders to emergency access grantors.
    ## Defaults to hourly (3 minutes after the hour). Set blank to disable this job.
    ##
    emergencyNotificationReminder: "0 3 * * * *"

    ## Cron schedule of the job that grants emergency access requests that have met the required wait time.
    ## Defaults to hourly (7 minutes after the hour). Set blank to disable this job.
    ##
    emergencyRequestTimeout: "0 7 * * * *"

    ## Cron schedule of the job that cleans old events from the event table.
    ## Defaults to daily. Set blank to disable this job. Also without EVENTS_DAYS_RETAIN set, this job will not start.
    ##
    eventCleanup: "0 10 0 * * *"

    ## Number of days to wait before auto-deleting a trashed item.
    ## If unset (the default), trashed items are not auto-deleted.
    ## This setting applies globally, so make sure to inform all users of any changes to this setting.
    ##
    trashAutoDeleteDays:

  ## Settings for the logging configuration
  ##
  logs:
    ## Change the verbosity of the log output
    ## Valid values are "trace", "debug", "info", "warn", "error" and "off"
    ## Setting it to "trace" or "debug" would also show logs for mounted
    ## routes and static file, websocket and alive requests
    ##
    level: info

    ## Enable extended logging, which shows timestamps and targets in the logs
    ##
    extended: true

    ## Timestamp format used in extended logging.
    ## Format specifiers: https://docs.rs/chrono/latest/chrono/format/strftime
    timestampFormat: "%Y-%m-%d %H:%M:%S.%3f"

    ## Logging to a file
    ##
    file: ""

    ## Logging to Syslog
    ## This requires extended logging
    ##
    useSyslog: false

  ## Paths to use inside the application container for storage of different files
  ##
  paths:
    ## The data folder is used for all files by default
    ##
    data: data

    ## The file path for the RSA key, 'data/rsa_key' by default
    ##
    rsaKey: ""

    ## The path for icon cache, 'data/icon_cache' by default
    ##
    iconCache: ""

    ## The mail attachments path, 'data/attachments' by default
    ##
    attachments: ""

    ## The mail sends path, 'data/sends' by default
    ##
    sends: ""

    ## The temporary data path, 'data/tmp' by default
    ##
    tmp: ""

  ## Paths from which to use HTML templates for the Web UI
  ##
  templates:
    ## Templates data folder, by default embedded templates are used
    ##
    folder: ""
    ## Automatically reload the templates for every request, slow, use only for development
    ##
    reload: false

  ## Icons settings
  ##
  icons:
    ## Icon service
    ## The predefined icon services are: internal, bitwarden, duckduckgo, google.
    ## To specify a custom icon service, set a URL template with exactly one instance of `{}`,
    ## which is replaced with the domain. For example: `https://icon.example.com/domain/{}`.
    ##
    ## `internal` refers to Vaultwarden's built-in icon fetching implementation.
    ## If an external service is set, an icon request to Vaultwarden will return an HTTP
    ## redirect to the corresponding icon at the external service. An external service may
    ## be useful if your Vaultwarden instance has no external network connectivity, or if
    ## you are concerned that someone may probe your instance to try to detect whether icons
    ## for certain sites have been cached.
    ##
    service: internal

    ## Icon redirect code
    ## The HTTP status code to use for redirects to an external icon service.
    ## The supported codes are 301 (legacy permanent), 302 (legacy temporary), 307 (temporary), and 308 (permanent).
    ## Temporary redirects are useful while testing different icon services, but once a service
    ## has been decided on, consider using permanent redirects for cacheability. The legacy codes
    ## are currently better supported by the Bitwarden clients.
    ##
    redirectCode: 302

    ## Disable icon downloading
    ## Set to true to disable icon downloading in the internal icon service.
    ## This still serves existing icons from $ICON_CACHE_FOLDER, without generating any external
    ## network requests. $ICON_CACHE_TTL must also be set to 0; otherwise, the existing icons
    ## will be deleted eventually, but won't be downloaded again.
    ##
    disableDownloading: false

    ## Icon download timeout
    ## Configure the timeout value when downloading the favicons.
    ## The default is 10 seconds, but this could be to low on slower network connections
    ##
    downloadTimeout: 10

    ## Icon blacklist Regex
    ## Any domains or IPs that match this regex won't be fetched by the icon service.
    ## Useful to hide other servers in the local network. Check the WIKI for more details
    ## NOTE: Always enclose this regex withing single quotes!
    ##
    blacklistRegex: '^(192\.168\.0\.[0-9]+|192\.168\.1\.[0-9]+)$'

    ## Any IP which is not defined as a global IP will be blacklisted.
    ## Useful to secure your internal environment: See https://en.wikipedia.org/wiki/Reserved_IP_addresses for a list of IPs
    ## which it will block
    ##
    blacklistNonGlobalIPs: true

    ## Settings for the Favicon cache
    ##
    cache:
      ## Cache time-to-live for successfully obtained icons, in seconds (0 is "forever") - default is 72 days
      ttl: 259200
      ## Cache time-to-live for icons which weren't available, in seconds (0 is "forever") - default is 72 days
      negttl: 259200

  ## Database settings
  ##
  database:
    type: "sqlite"
    user: ""
    password: ""
    host: ""
    port: ""
    name: ""
    uri: ""
    existingSecret:
      name: ""
      key: ""

    ## Enable WAL for the DB
    ## Set to false to avoid enabling WAL during startup.
    ## Note that if the DB already has WAL enabled, you will also need to disable WAL in the DB,
    ## this setting only prevents Vaultwarden from automatically enabling it on start.
    ## Please read project wiki page about this setting first before changing the value as it can
    ## cause performance degradation or might render the service unable to start.
    ##
    enableWAL: false

    ## Database connection retries
    ## Number of times to retry the database connection during startup, with 1 second delay between each retry, set to
    ## 0 to retry indefinitely
    ##
    connectionRetries: 15

  ## SMTP settings
  ##
  smtp:
    ## Hostname of the Mail server
    ## Example: mx.domain.tld
    ##
    host: ""

    ## The from-address for emails sent by Vaultwarden
    ## Example: vaultwarden@domain.tld
    ##
    from: ""

    ## The from-name for emails sent by Vaultwarden
    ## Example: Vaultwarden
    ##
    fromName: ""

    ## Either 'starttls', 'force_tls' or 'off'
    security: "starttls"

    ## SMTP port used
    ##
    port: 587

    ## SMTP user
    ##
    username: ""

    ## SMTP password
    ##
    password: ""

    ## Defaults for SSL is "Plain" and "Login" and nothing for Non-SSL connections.
    ## Possible values: ["Plain", "Login", "Xoauth2"].
    ## Multiple options need to be separated by a comma ','.
    ##
    auth: "Plain"

    ## An existing BasicAuth secret containing credentials for the SMTP server
    ##
    existingSecret:
      name: ""

    ## General SMTP settings
    ##
    timeout: 15

    ## Whether to send mail via the `sendmail` command
    ##
    sendmail:
      ## False by default since Vaultwarden includes a Rust implementation for SMTP
      ##
      enabled: false
      ## The path to which sendmail binary to use. The one found in the $PATH is used if not specified.
      ##
      path: ""

    ## Server name sent during the SMTP HELO
    ## By default this value should be is on the machine's hostname,
    ## but might need to be changed in case it trips some anti-spam filters
    heloName: ""

    ## Embed images as email attachments
    embedImages: false

    ## Accept Invalid Hostnames
    ## DANGEROUS: This option introduces significant vulnerabilities to man-in-the-middle attacks!
    ## Only use this as a last resort if you are not able to use a valid certificate.
    ##
    acceptInvalidHostnames: false

    ## Accept Invalid Certificates
    ## DANGEROUS: This option introduces significant vulnerabilities to man-in-the-middle attacks!
    ## Only use this as a last resort if you are not able to use a valid certificate.
    ## If the Certificate is valid but the hostname doesn't match, please use SMTP_ACCEPT_INVALID_HOSTNAMES instead.
    ##
    acceptInvalidCertificates: false

    ## Require new device emails. When a user logs in an email is required to be sent.
    ## If sending the email fails the login attempt will fail!!
    ##
    requireDeviceEmail: false

  ## Rocket specific settings
  ## ref: https://rocket.rs/v0.4/guide/configuration/ for more details.
  ##
  rocket:
    ## The address rocket should bind to
    ##
    address: "0.0.0.0"

    ## The port rocket should bind to
    ##
    port: 80

    ## The amount of rocket workers to create
    ##
    workers: 10

    ## Rocket TLS configuration
    ##
    tls: {}

###############################################################################
###############################################################################

## @section Ingress parameters
##

## FMJ Studios Vaultwarden Ingress settings
## @param ingress.enabled [default: false] Whether to enable Ingress
## @param ingress.className [string] The IngressClass to use for the pod's ingress
## @param ingress.annotations [object] Annotations for the Ingress resource
## @param ingress.hosts [array] A list of hosts for the Ingress resource
## @param ingress.tls [array] A list of hostnames and secret names to use for TLS

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## @param podAnnotations [object] Extra annotations for the the Vaultwarden pod
##
podAnnotations: {}

## @param podSecurityContext [object] Security context settings for the Vaultwarden pod
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
podSecurityContext:
  {}
  # fsGroup: 1001
  # supplementalGroups:
  #   - 1001

## @param securityContext [object] General security context settings for
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
securityContext:
  {}
  # allowPrivilegeEscalation: false
  # privileged: false
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsGroup: 1001
  # runAsUser: 1001
  # capabilities:
  #   drop:
  #     - ALL

## @section Service parameters
##

## FMJ Studios Vaultwarden Service settings
## @param service.type [default: ClusterIP] The type of service to create for the deployment
## @param service.port [default: 80] The port to use on the service
## @param service.annotations [object] Annotations for the service resource
## @param service.labels [object] Labels for the service resource

service:
  type: ClusterIP
  port: 80
  annotations: {}
  labels: {}

## @section Vaultwarden Service Account parameters
##

## Vaultwarden service account
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
## @param serviceAccount.create [default: true] Whether or not a service account should be created
## @param serviceAccount.annotations [object] Annotations to add to the service account
## @param serviceAccount.name [string] A custom name for the service account, otherwise vaultwarden.fullname is used

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # The list of secrets mountable by this service account.
  # See https://kubernetes.io/docs/reference/labels-annotations-taints/#enforce-mountable-secrets
  secrets: []

## @section Vaultwarden resource settings
##

## FMJStudios Vaultwarden resource settings
## ref: https://kubernetes.io/docs/user-guide/compute-resources/
## @param resources.limits The resource limits for the Vaultwarden Resources
## @param resources.requests The resource requests for the Vaultwarden Resources
##
resources:
  {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## @section Pod disruption budget parameters
##

## FMJ Studios Vaultwarden pod disruption budget settings
## ref: # https://kubernetes.io/docs/tasks/run-application/configure-pdb/
## @param podDisruptionBudget.enabled [default: false] Enable the pod disruption budget
## @param podDisruptionBudget.minAvailable The minium amount of pods which need to be available
## @param podDisruptionBudget.maxUnavailable The maximum amount of pods which can be unavailable

podDisruptionBudget:
  enabled: false
  minAvailable:
  maxUnavailable:

## @param nodeSelector Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## @param tolerations Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## @param affinity Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}
