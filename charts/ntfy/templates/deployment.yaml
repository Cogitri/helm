apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ntfy.fullname" . }}
  labels:
    {{- include "ntfy.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "ntfy.selectorLabels" . | nindent 6 }}
  {{- if .Values.strategy -}}
  strategy:
  {{- toYaml .Values.strategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      {{- if .Values.podAnnotations }}
      annotations:
        checksum/secrets: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ntfy.selectorLabels" . | nindent 8 }}
      {{- if .Values.podLabels -}}
        {{- toYaml .Values.podLabels | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.image.pullSecrets | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ntfy.serviceAccountName" . }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ include "ntfy.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            {{- if (or .Values.ntfy.smtp.senderPass.value .Values.ntfy.smtp.senderPass.existingSecret.name) }}
            - name: NTFY_SMTP_SENDER_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ default (include "ntfy.secrets.smtp" .) .Values.ntfy.smtp.senderPass.existingSecret.name }}
                  key: password
            {{- end }}
            {{- if (or .Values.ntfy.twilio.authToken.value .Values.ntfy.twilio.authToken.existingSecret.name) }}
            - name: NTFY_TWILIO_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "ntfy.secrets.twilio" . }}
                  key: token
            {{- end }}
            {{- if (or .Values.ntfy.upstream.accessToken.value .Values.ntfy.upstream.accessToken.existingSecret.name) }}
            - name: NTFY_UPSTREAM_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "ntfy.secrets.upstream" . }}
                  key: token
            {{- end }}
          {{/* Container settings */}}
          ports:
            - name: http
              containerPort: {{ .Values.ntfy.listenHTTP }}
              protocol: TCP
            - name: https
              containerPort: {{ .Values.ntfy.listenHTTPS }}
              protocol: TCP
          volumeMounts:
            - name: {{ printf "%s-config" (include "ntfy.fullname" .) }}
              mountPath: /var/lib/ntfy/server.yml
            {{- if .Values.ntfy.cache.file }}
            - name: {{ include "ntfy.pvs.cache" . }}
              mountPath: {{ dir .Values.ntfy.cache.file }}
            {{- end }}
            {{- if .Values.ntfy.auth.file }}
            - name: {{ include "ntfy.pvs.auth" . }}
              mountPath: {{ dir .Values.ntfy.auth.file }}
            {{- end }}
            {{- if .Values.ntfy.web.file }}
            - name: {{ include "ntfy.pvs.web" . }}
              mountPath: {{ dir .Values.ntfy.web.file }}
            {{- end }}
          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          {{- if .Values.securityContext }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      volumes:
        {{- if (or .Values.ntfy.cache.file .Values.ntfy.cache.pvc.existingClaim)}}
        - name: {{ include "ntfy.pvs.cache" . }}
          persistentVolumeClaim:
            claimName: {{ default (include "ntfy.pvcs.cache" .) .Values.ntfy.cache.pvc.existingClaim }}
        {{- end }}
        {{- if (or .Values.ntfy.auth.file .Values.ntfy.web.auth.existingClaim)}}
        - name: {{ include "ntfy.pvs.auth" . }}
          persistentVolumeClaim:
            claimName: {{ default (include "ntfy.pvcs.auth" .) .Values.ntfy.auth.pvc.existingClaim }}
        {{- end }}
        {{- if (or .Values.ntfy.web.file .Values.ntfy.web.pvc.existingClaim)}}
        - name: {{ include "ntfy.pvs.web" . }}
          persistentVolumeClaim:
            claimName: {{ default (include "ntfy.pvcs.web" .) .Values.ntfy.web.pvc.existingClaim }}
        {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}
      {{- if .Values.initContainers }}
      initContainers:
        {{- toYaml .Values.initContainers | nindent 8 }}
      {{- end }}